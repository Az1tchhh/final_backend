volumes:
  postgres_data:
  redis_data:
  media:
  static:
  logs:
  prom_data:
  grafana_storage:

services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - TERM=linux
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_storage:/var/lib/grafana'
      - ./grafana:/etc/grafana/provisioning/datasources

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/src/static
      - ./media:/src/mediafiles
    ports:
      - "80:80"
    depends_on:
      - web

  db:
    image: postgres:13-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - PGUSER=user
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=final_db
    ports:
      - "5432:5432"

  db2:
    image: postgres:13-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - PGUSER=user
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=final_db
    ports:
      - "5433:5433"

  db3:
    image: postgres:13-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - PGUSER=user
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=final_db
    ports:
      - "5434:5434"

  web:
    build: .
    command: >
      bash -c "python3 manage.py migrate && python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8001 --workers 1 --log-level 'debug'"
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      # - .:/src
      - ./media:/src/mediafiles
      - ./static:/src/static
      - logs:/logs
    depends_on:
      - db

  redis:
    restart: unless-stopped
    image: redis:alpine
    command: redis-server --requirepass OMeDuTERnUtH
    ports:
      - "6370:6379"
    volumes:
      - redis_data:/data

  celery:
    build: .
    restart: unless-stopped
    env_file:
      - .env
    command: celery -A config worker -l info
    depends_on:
      - redis
